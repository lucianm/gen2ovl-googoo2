From 6ae053c5d06dbab7274803e2b3357b33d3a84d62 Mon Sep 17 00:00:00 2001
From: Lucian Muresan <lucianm@users.sourceforge.net>
Date: Wed, 6 May 2020 14:33:15 +0200
Subject: [PATCH 2/2] generate arg file templates out of the command line help
 output of VDR or any plugin to /tmp or to specified DIR

---
 vdr.c | 66 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)

diff --git a/vdr.c b/vdr.c
index 1c98fb29..5e18a954 100644
--- a/vdr.c
+++ b/vdr.c
@@ -106,6 +106,7 @@ static int LastSignal = 0;
 #define DEFAULTPLUGINDIR PLUGINDIR
 #define DEFAULTLOCDIR LOCDIR
 #define DEFAULTEPGDATAFILENAME "epg.data"
+#define DEFAULTTMPLARGDIR "/tmp"
 const char *VideoDirectory = DEFAULTVIDEODIR;
 const char *ConfigDirectory = NULL;
 
@@ -277,6 +278,9 @@ cString CommandLineHelp(void)
        "                           useful in conjunction with --edit)\n"
        "            --showargs[=DIR] print the arguments read from DIR and exit\n"
        "                           (default: %s)\n"
+       "            --tmplargs[=DIR] generate arguments template file(s) for VDR or\n"
+       "                           specified plugins to DIR and exit\n"
+       "                           (default: %s)\n"
        "  -t TTY,   --terminal=TTY controlling tty\n"
        "  -u USER,  --user=USER    run as user USER; only applicable if started as\n"
        "                           root; USER can be a user name or a numerical id\n"
@@ -301,11 +305,44 @@ cString CommandLineHelp(void)
        DEFAULTSVDRPPORT,
        DEFAULTRESDIR,
        DEFAULTARGSDIR,
+       DEFAULTTMPLARGDIR,
        DEFAULTVIDEODIR,
        DEFAULTWATCHDOG
        );
 }
 
+bool WriteArgsTemplate(const char* dir, const char* name, const char* version, const char* description, const char* cliHelp) {
+   const cString templatePath = cString::sprintf("%s/%s.conf.tmpl", dir, name);
+   FILE* f = fopen((const char*)(templatePath), "w");
+   if (!f) {
+       fprintf(stderr, "vdr: failed to generate config template: %s\n", (const char*)(templatePath));
+       return false;
+       }
+   fprintf(f, "# Please move/rename this file to argsdir with just the .conf extension and edit it with one option per line as needed.\n\n" );
+   fprintf(f, "# %s (%s) - %s\n\n", name, version, description);
+   fprintf(f, "[%s]\n\n", name);
+   if (cliHelp) {
+      fprintf(f, "#");
+      for (unsigned int i = 0; i < strlen(cliHelp); i++) {
+         if (i < strlen(cliHelp) - 1 && cliHelp[i] == '\n') {
+           fprintf(f, "\n#");
+           if (cliHelp[i + 1] != '\n') {
+              i++;
+              }
+           }
+         if (cliHelp[i] != '\n') {
+            fprintf(f, "%c", cliHelp[i]);
+            }
+         }
+      } else {
+      fprintf(f, "# This plugin has no command line arguments!\n");
+      }
+      fprintf(f, "\n");
+   fclose(f);
+   fprintf(stdout, "vdr: successfully generated config template: %s\n", (const char*)(templatePath));
+   return true;
+}
+
 int main(int argc, char *argv[])
 {
   // Save terminal settings:
@@ -329,6 +366,8 @@ int main(int argc, char *argv[])
   const char *LocaleDirectory = DEFAULTLOCDIR;
   const char *EpgDataFileName = DEFAULTEPGDATAFILENAME;
   bool DisplayHelp = false;
+  bool GenerateConfTemplates = false;
+  const char *ArgTemplatesDirectory = NULL;
   bool DisplayVersion = false;
   bool DaemonMode = false;
   int SysLogTarget = LOG_USER;
@@ -398,6 +437,7 @@ int main(int argc, char *argv[])
       { "record",   required_argument, NULL, 'r' },
       { "resdir",   required_argument, NULL, 'r' | 0x100 },
       { "showargs", optional_argument, NULL, 's' | 0x200 },
+      { "tmplargs", optional_argument, NULL, 't' | 0x100 },
       { "shutdown", required_argument, NULL, 's' },
       { "split",    no_argument,       NULL, 's' | 0x100 },
       { "terminal", required_argument, NULL, 't' },
@@ -591,6 +631,10 @@ int main(int argc, char *argv[])
                         printf("%s\n", v[i]);
                     return 0;
                     }
+          case 't' | 0x100:
+                    GenerateConfTemplates = true;
+                    ArgTemplatesDirectory = optarg ? optarg : DEFAULTTMPLARGDIR;
+                    break;
           case 't': Terminal = optarg;
                     if (access(Terminal, R_OK | W_OK) < 0) {
                        fprintf(stderr, "vdr: can't access terminal: %s\n", Terminal);
@@ -677,6 +721,28 @@ int main(int argc, char *argv[])
      return 0;
      }
 
+  // args template file generation
+  if (GenerateConfTemplates) {
+     if (!PluginManager.HasPlugins()) {
+        // generate template for VDR
+        if (!WriteArgsTemplate(ArgTemplatesDirectory, "vdr", VDRVERSION, "The Video Disk Recorder", CommandLineHelp()))
+            return 2;
+        } else {
+            PluginManager.LoadPlugins();
+            // generate template(s) for specified plugin(s)
+            for (int i = 0; ; i++) {
+                cPlugin *p = PluginManager.GetPlugin(i);
+                if (p) {
+                    if (!WriteArgsTemplate(ArgTemplatesDirectory, p->Name(), p->Version(), p->Description(), p->CommandLineHelp()))
+                        return 2;
+                    }
+                else
+                   break;
+                }
+        }
+     return 0;
+     }
+
   // Log file:
 
   if (SysLogLevel > 0)
-- 
2.26.1.windows.1

